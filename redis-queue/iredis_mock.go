// Code generated by MockGen. DO NOT EDIT.
// Source: iredis.go

// Package main is a generated GoMock package.
package main

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockIRedisClientInterface is a mock of IRedisClientInterface interface.
type MockIRedisClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockIRedisClientInterfaceMockRecorder
}

// MockIRedisClientInterfaceMockRecorder is the mock recorder for MockIRedisClientInterface.
type MockIRedisClientInterfaceMockRecorder struct {
	mock *MockIRedisClientInterface
}

// NewMockIRedisClientInterface creates a new mock instance.
func NewMockIRedisClientInterface(ctrl *gomock.Controller) *MockIRedisClientInterface {
	mock := &MockIRedisClientInterface{ctrl: ctrl}
	mock.recorder = &MockIRedisClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRedisClientInterface) EXPECT() *MockIRedisClientInterfaceMockRecorder {
	return m.recorder
}

// BRPop mocks base method.
func (m *MockIRedisClientInterface) BRPop(ctx context.Context, queue string, timeout time.Duration) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BRPop", ctx, queue, timeout)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BRPop indicates an expected call of BRPop.
func (mr *MockIRedisClientInterfaceMockRecorder) BRPop(ctx, queue, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BRPop", reflect.TypeOf((*MockIRedisClientInterface)(nil).BRPop), ctx, queue, timeout)
}

// LPush mocks base method.
func (m *MockIRedisClientInterface) LPush(ctx context.Context, queue string, value interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LPush", ctx, queue, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LPush indicates an expected call of LPush.
func (mr *MockIRedisClientInterfaceMockRecorder) LPush(ctx, queue, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPush", reflect.TypeOf((*MockIRedisClientInterface)(nil).LPush), ctx, queue, value)
}
