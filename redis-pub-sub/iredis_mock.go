// Code generated by MockGen. DO NOT EDIT.
// Source: iredis.go

// Package main is a generated GoMock package.
package main

import (
	context "context"
	reflect "reflect"

	redis "github.com/go-redis/redis/v8"
	gomock "github.com/golang/mock/gomock"
)

// MockIRedisClientInterface is a mock of IRedisClientInterface interface.
type MockIRedisClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockIRedisClientInterfaceMockRecorder
}

// MockIRedisClientInterfaceMockRecorder is the mock recorder for MockIRedisClientInterface.
type MockIRedisClientInterfaceMockRecorder struct {
	mock *MockIRedisClientInterface
}

// NewMockIRedisClientInterface creates a new mock instance.
func NewMockIRedisClientInterface(ctrl *gomock.Controller) *MockIRedisClientInterface {
	mock := &MockIRedisClientInterface{ctrl: ctrl}
	mock.recorder = &MockIRedisClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRedisClientInterface) EXPECT() *MockIRedisClientInterfaceMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockIRedisClientInterface) Publish(ctx context.Context, channel, message string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, channel, message)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockIRedisClientInterfaceMockRecorder) Publish(ctx, channel, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockIRedisClientInterface)(nil).Publish), ctx, channel, message)
}

// Subscribe mocks base method.
func (m *MockIRedisClientInterface) Subscribe(ctx context.Context, channel string) *redis.PubSub {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, channel)
	ret0, _ := ret[0].(*redis.PubSub)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockIRedisClientInterfaceMockRecorder) Subscribe(ctx, channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockIRedisClientInterface)(nil).Subscribe), ctx, channel)
}
