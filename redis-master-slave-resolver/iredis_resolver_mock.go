// Code generated by MockGen. DO NOT EDIT.
// Source: iredis_resolver.go

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRedisResolverInterface is a mock of RedisResolverInterface interface.
type MockRedisResolverInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRedisResolverInterfaceMockRecorder
}

// MockRedisResolverInterfaceMockRecorder is the mock recorder for MockRedisResolverInterface.
type MockRedisResolverInterfaceMockRecorder struct {
	mock *MockRedisResolverInterface
}

// NewMockRedisResolverInterface creates a new mock instance.
func NewMockRedisResolverInterface(ctrl *gomock.Controller) *MockRedisResolverInterface {
	mock := &MockRedisResolverInterface{ctrl: ctrl}
	mock.recorder = &MockRedisResolverInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisResolverInterface) EXPECT() *MockRedisResolverInterfaceMockRecorder {
	return m.recorder
}

// Clauses mocks base method.
func (m *MockRedisResolverInterface) Clauses(action string) IRedisClientInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clauses", action)
	ret0, _ := ret[0].(IRedisClientInterface)
	return ret0
}

// Clauses indicates an expected call of Clauses.
func (mr *MockRedisResolverInterfaceMockRecorder) Clauses(action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clauses", reflect.TypeOf((*MockRedisResolverInterface)(nil).Clauses), action)
}
